package applet.kyber;

import javacard.framework.*;
import javacard.security.*;

public class Kyber512 extends Applet
{
	private Keccak keccak = null;

	private short receivedPrivateKeyLength = 0;
	private short receivedPublicKeyLength = 0;
	private short receivedSecretKeyLength = 0;
	private short receivedEncapsulationLength = 0;
	private short setEncapsulationLength = 0;

	private KyberAlgorithm kyber = KyberAlgorithm.getInstance((byte)2);

	private Kyber512(byte[] parameters, short offset)
	{
		super.register(parameters, (short)(offset + 1), parameters[offset]);
	}

	public static void install(byte[] parameters, short offset, byte length)
	{
		new Kyber512(parameters, offset);
	}

	@Override
	public void process(APDU apdu) throws ISOException
	{
		byte[] apduBuffer = apdu.getBuffer();

		// ignore the applet select command dispatched to the process
		if (selectingApplet()) return;

		if (apduBuffer[ISO7816.OFFSET_CLA] == (byte)0x00)
		{
			switch (apduBuffer[ISO7816.OFFSET_INS])
			{
				case (byte)0x01: this.generateKyber512KeyPair(apdu); break;
				case (byte)0x02: this.encapsulate(apdu); break;
				case (byte)0x03: this.decapsulate(apdu); break;
				case (byte)0x04: this.obtainPrivateKey(apdu); break;
				case (byte)0x05: this.obtainPublicKey(apdu); break;
				case (byte)0x06: this.obtainSecretKey(apdu); break;
				case (byte)0x07: this.obtainEncapsulation(apdu); break;
				case (byte)0x08: this.setEncapsulation(apdu); break;
				case (byte)0x09: this.getFreeRAM(apdu); break;
				case (byte)0x10: this.clearSecret(apdu); break;
				default:
					ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
					break;
			}
		}
		else ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
	}

	public void clearSecret(APDU apdu)
	{
		for (byte i = 0; i < 32; i++)
		{
			KyberAlgorithm.getInstance((byte)2).secretKey[i] = (byte)0x00;
		}
	}

	public void getFreeRAM(APDU apdu)
	{
		byte[] buffer = apdu.getBuffer();
		byte[] ramUsageBuffer = new byte[2];
		short availableRAM = JCSystem.getAvailableMemory(JCSystem.MEMORY_TYPE_TRANSIENT_DESELECT);
		ramUsageBuffer[0] = (byte)(availableRAM >> 8);
		ramUsageBuffer[1] = (byte)(availableRAM & 0xFF);

		Util.arrayCopyNonAtomic(ramUsageBuffer, (short)0x0000, buffer, (short)0x0000, (short)ramUsageBuffer.length);
		apdu.setOutgoingAndSend((short)0x0000, (short)ramUsageBuffer.length);
		return;
	}

	public void generateKyber512KeyPair(APDU apdu)
	{
		kyber.generateKeys(KyberParams.Kyber512SKBytes);
	}

	private void encapsulate(APDU apdu)
	{
		//temporarly disabled random for testing
		kyber.encapsulate();
	}

	private void decapsulate(APDU apdu)
	{
		//temporarly disabled random for testing, temp hardcoded 512
		//Also temporarly added encapsulation
//		kyber.encapsulation = new byte[]{(byte)0x6B,(byte)0xDB,(byte)0x33,(byte)0x0D,(byte)0xDB,(byte)0x7B,(byte)0x51,(byte)0x3C,(byte)0x80,(byte)0xDD,(byte)0x8F,(byte)0xCC,(byte)0xBD,(byte)0x31,(byte)0x87,(byte)0x7C,(byte)0xD0,(byte)0x5C,(byte)0xD8,(byte)0x66,(byte)0xB4,(byte)0x9F,(byte)0x7C,(byte)0x11,(byte)0x36,(byte)0x98,(byte)0xC2,(byte)0x85,(byte)0xAA,(byte)0x2B,(byte)0x94,(byte)0x92,(byte)0x78,(byte)0xD2,(byte)0x4D,(byte)0x54,(byte)0xFE,(byte)0xFD,(byte)0x11,(byte)0x90,(byte)0xAA,(byte)0xF8,(byte)0xAA,(byte)0xBA,(byte)0xF7,(byte)0x0B,(byte)0x93,(byte)0xA4,(byte)0x02,(byte)0x74,(byte)0xF9,(byte)0xB3,(byte)0xFF,(byte)0xF3,(byte)0x6D,(byte)0xC8,(byte)0x3D,(byte)0xC0,(byte)0xF2,(byte)0x10,(byte)0xB6,(byte)0xA1,(byte)0x0A,(byte)0x53,(byte)0x9B,(byte)0x50,(byte)0xCA,(byte)0x3C,(byte)0xCA,(byte)0xC3,(byte)0xC8,(byte)0x94,(byte)0xAB,(byte)0x1D,(byte)0xFF,(byte)0x31,(byte)0xCC,(byte)0x6D,(byte)0x5F,(byte)0x7F,(byte)0xE1,(byte)0xDF,(byte)0xC0,(byte)0x8F,(byte)0xB6,(byte)0xF4,(byte)0x2B,(byte)0x4C,(byte)0xCC,(byte)0x40,(byte)0x4E,(byte)0x81,(byte)0x04,(byte)0xE4,(byte)0xA6,(byte)0x4E,(byte)0x7F,(byte)0x04,(byte)0xB8,(byte)0xEF,(byte)0xD6,(byte)0x7F,(byte)0xDA,(byte)0x53,(byte)0x46,(byte)0xB2,(byte)0x15,(byte)0x45,(byte)0x46,(byte)0x8C,(byte)0x37,(byte)0xCB,(byte)0xCD,(byte)0xA4,(byte)0x4C,(byte)0x7A,(byte)0x11,(byte)0x47,(byte)0x5C,(byte)0xE9,(byte)0x5B,(byte)0xE9,(byte)0xDA,(byte)0x61,(byte)0x8F,(byte)0xA8,(byte)0x99,(byte)0xD1,(byte)0xF7,(byte)0x78,(byte)0xE0,(byte)0x55,(byte)0x35,(byte)0xF1,(byte)0x61,(byte)0xF4,(byte)0x7B,(byte)0x4A,(byte)0x9D,(byte)0xF9,(byte)0x4F,(byte)0x6A,(byte)0xDE,(byte)0x8D,(byte)0x04,(byte)0x01,(byte)0xA9,(byte)0xD6,(byte)0x78,(byte)0xD5,(byte)0xAD,(byte)0xA8,(byte)0xA2,(byte)0x48,(byte)0x33,(byte)0x6E,(byte)0xB3,(byte)0x5E,(byte)0xF3,(byte)0x7E,(byte)0x93,(byte)0x5D,(byte)0x4E,(byte)0x25,(byte)0x69,(byte)0xCC,(byte)0x4D,(byte)0x89,(byte)0xFA,(byte)0xC7,(byte)0xD6,(byte)0x71,(byte)0x44,(byte)0xF7,(byte)0xBC,(byte)0x31,(byte)0x83,(byte)0x99,(byte)0x1C,(byte)0x91,(byte)0x14,(byte)0x28,(byte)0xE1,(byte)0x3B,(byte)0x82,(byte)0x7F,(byte)0xF9,(byte)0x0F,(byte)0xED,(byte)0x5D,(byte)0x4E,(byte)0x6A,(byte)0x68,(byte)0xAD,(byte)0xE4,(byte)0x2F,(byte)0x59,(byte)0x41,(byte)0xF9,(byte)0xAB,(byte)0x68,(byte)0xE0,(byte)0x3C,(byte)0xC2,(byte)0xC7,(byte)0x12,(byte)0xFC,(byte)0xD2,(byte)0x26,(byte)0xB3,(byte)0x01,(byte)0x2D,(byte)0x00,(byte)0xAC,(byte)0x96,(byte)0xCD,(byte)0xEF,(byte)0xE1,(byte)0xE5,(byte)0xF6,(byte)0x09,(byte)0x81,(byte)0x31,(byte)0x1D,(byte)0x92,(byte)0xED,(byte)0x82,(byte)0x5F,(byte)0xF9,(byte)0x19,(byte)0x53,(byte)0xF3,(byte)0x76,(byte)0x3B,(byte)0x50,(byte)0x95,(byte)0x94,(byte)0xF5,(byte)0x6D,(byte)0x47,(byte)0xB8,(byte)0x03,(byte)0xC8,(byte)0xE3,(byte)0x26,(byte)0x3B,(byte)0x3E,(byte)0x4F,(byte)0xDE,(byte)0x8A,(byte)0x1B,(byte)0x1D,(byte)0x5B,(byte)0x61,(byte)0xE5,(byte)0xF9,(byte)0xDD,(byte)0x66,(byte)0x6A,(byte)0x24,(byte)0x39,(byte)0x91,(byte)0x0F,(byte)0x56,(byte)0xB5,(byte)0xF6,(byte)0xE4,(byte)0xB6,(byte)0x4F,(byte)0x34,(byte)0x30,(byte)0xA6,(byte)0xF5,(byte)0x36,(byte)0x2C,(byte)0x56,(byte)0x55,(byte)0xC6,(byte)0xF7,(byte)0x1E,(byte)0x16,(byte)0xB1,(byte)0x45,(byte)0xE9,(byte)0xD7,(byte)0xD6,(byte)0x0D,(byte)0x98,(byte)0xBA,(byte)0x01,(byte)0xB5,(byte)0x9D,(byte)0x25,(byte)0x4B,(byte)0x0C,(byte)0x6E,(byte)0x73,(byte)0xE8,(byte)0x7C,(byte)0x57,(byte)0x2B,(byte)0x71,(byte)0x6A,(byte)0x02,(byte)0x4D,(byte)0x6E,(byte)0x32,(byte)0x98,(byte)0xCC,(byte)0x7F,(byte)0xE1,(byte)0xA4,(byte)0xA5,(byte)0xA6,(byte)0x16,(byte)0x28,(byte)0xD7,(byte)0x23,(byte)0x02,(byte)0x73,(byte)0x17,(byte)0xF3,(byte)0x67,(byte)0x6B,(byte)0x17,(byte)0x2B,(byte)0xC1,(byte)0x5C,(byte)0xC8,(byte)0xBB,(byte)0x21,(byte)0x71,(byte)0xB7,(byte)0x2B,(byte)0x72,(byte)0x2E,(byte)0xDF,(byte)0x9B,(byte)0x5A,(byte)0x17,(byte)0xE0,(byte)0xED,(byte)0x8B,(byte)0xCB,(byte)0x18,(byte)0xAF,(byte)0x24,(byte)0xFA,(byte)0x42,(byte)0x2F,(byte)0x9D,(byte)0x4C,(byte)0xEE,(byte)0x27,(byte)0x3A,(byte)0x27,(byte)0xF9,(byte)0xFE,(byte)0xAA,(byte)0x3E,(byte)0x13,(byte)0xD7,(byte)0x03,(byte)0xF3,(byte)0x99,(byte)0xC0,(byte)0x95,(byte)0xA6,(byte)0x3E,(byte)0xCD,(byte)0xA2,(byte)0x56,(byte)0x20,(byte)0xC1,(byte)0x2D,(byte)0xF0,(byte)0xA2,(byte)0x28,(byte)0x1B,(byte)0xF5,(byte)0x0C,(byte)0x4A,(byte)0x37,(byte)0xFF,(byte)0x87,(byte)0xAE,(byte)0x33,(byte)0xF8,(byte)0xA1,(byte)0xAA,(byte)0xB8,(byte)0xEC,(byte)0x01,(byte)0x5A,(byte)0x49,(byte)0x9E,(byte)0x31,(byte)0xE8,(byte)0x10,(byte)0xBF,(byte)0x47,(byte)0x9B,(byte)0x1F,(byte)0xA8,(byte)0x85,(byte)0x0A,(byte)0x9E,(byte)0x6E,(byte)0x13,(byte)0x50,(byte)0x14,(byte)0x12,(byte)0xDC,(byte)0x47,(byte)0x66,(byte)0x8C,(byte)0x61,(byte)0xE8,(byte)0x1A,(byte)0x45,(byte)0x26,(byte)0xBE,(byte)0xBC,(byte)0x8D,(byte)0x4B,(byte)0xF3,(byte)0xD2,(byte)0x60,(byte)0x34,(byte)0x3A,(byte)0x69,(byte)0xC4,(byte)0xC5,(byte)0xBE,(byte)0x31,(byte)0xFA,(byte)0x0B,(byte)0x7A,(byte)0xB1,(byte)0x68,(byte)0x7E,(byte)0xE2,(byte)0x39,(byte)0x42,(byte)0x8D,(byte)0x24,(byte)0xC5,(byte)0xDD,(byte)0x71,(byte)0x18,(byte)0xF7,(byte)0x33,(byte)0x9F,(byte)0xE1,(byte)0x8D,(byte)0x78,(byte)0xD2,(byte)0x94,(byte)0x4A,(byte)0x05,(byte)0x10,(byte)0x26,(byte)0xC3,(byte)0x0E,(byte)0x4E,(byte)0xF5,(byte)0x56,(byte)0x2A,(byte)0x70,(byte)0x21,(byte)0x78,(byte)0xCF,(byte)0xF8,(byte)0xD8,(byte)0x57,(byte)0xC8,(byte)0x0E,(byte)0x9C,(byte)0x8B,(byte)0x90,(byte)0xF9,(byte)0x78,(byte)0xF3,(byte)0xDA,(byte)0x10,(byte)0x06,(byte)0x21,(byte)0x4C,(byte)0x98,(byte)0x0A,(byte)0xA6,(byte)0xBB,(byte)0x20,(byte)0x94,(byte)0x02,(byte)0xA6,(byte)0x92,(byte)0x27,(byte)0x62,(byte)0x57,(byte)0x2F,(byte)0x9B,(byte)0x70,(byte)0xC0,(byte)0x89,(byte)0x24,(byte)0x56,(byte)0xF7,(byte)0xCC,(byte)0x57,(byte)0xC6,(byte)0x87,(byte)0xE2,(byte)0xA5,(byte)0x76,(byte)0x08,(byte)0x3B,(byte)0x25,(byte)0x4E,(byte)0x33,(byte)0x87,(byte)0x77,(byte)0x2E,(byte)0x01,(byte)0xB9,(byte)0x9D,(byte)0xA5,(byte)0x69,(byte)0x12,(byte)0xF5,(byte)0x77,(byte)0x30,(byte)0xE5,(byte)0x01,(byte)0xB8,(byte)0x59,(byte)0x8F,(byte)0x23,(byte)0xC7,(byte)0xC9,(byte)0xF0,(byte)0x5F,(byte)0x7C,(byte)0x5D,(byte)0xD4,(byte)0x51,(byte)0x4B,(byte)0xD7,(byte)0x10,(byte)0xC6,(byte)0xEC,(byte)0x72,(byte)0xA7,(byte)0x6D,(byte)0xB5,(byte)0xE2,(byte)0x26,(byte)0x5A,(byte)0x15,(byte)0x80,(byte)0x82,(byte)0xA2,(byte)0x92,(byte)0x3C,(byte)0xEE,(byte)0xC3,(byte)0x89,(byte)0x79,(byte)0xC4,(byte)0x21,(byte)0xFF,(byte)0xD6,(byte)0x2B,(byte)0x86,(byte)0xD8,(byte)0xC1,(byte)0x6A,(byte)0xD7,(byte)0x74,(byte)0x45,(byte)0xB1,(byte)0x8B,(byte)0x92,(byte)0x9D,(byte)0x9D,(byte)0x56,(byte)0xBB,(byte)0x83,(byte)0xB8,(byte)0x76,(byte)0xE6,(byte)0xB8,(byte)0x7C,(byte)0x10,(byte)0x95,(byte)0x60,(byte)0x48,(byte)0x4A,(byte)0x9E,(byte)0x73,(byte)0x87,(byte)0x8B,(byte)0x7C,(byte)0xB5,(byte)0xAD,(byte)0x42,(byte)0xF4,(byte)0x69,(byte)0xF9,(byte)0xC7,(byte)0xB3,(byte)0x32,(byte)0x3B,(byte)0x01,(byte)0x88,(byte)0x93,(byte)0x32,(byte)0xC6,(byte)0x6E,(byte)0x84,(byte)0xA1,(byte)0x95,(byte)0xDB,(byte)0x7B,(byte)0x06,(byte)0x46,(byte)0x24,(byte)0x5A,(byte)0xDC,(byte)0x26,(byte)0x80,(byte)0xFA,(byte)0x35,(byte)0x65,(byte)0xA7,(byte)0x6F,(byte)0xF9,(byte)0x83,(byte)0xD3,(byte)0xA0,(byte)0xB2,(byte)0x67,(byte)0x03,(byte)0x86,(byte)0x02,(byte)0xBF,(byte)0x12,(byte)0xA1,(byte)0xF7,(byte)0xD4,(byte)0x22,(byte)0x39,(byte)0xF0,(byte)0xB3,(byte)0x7C,(byte)0x0B,(byte)0xD5,(byte)0xD4,(byte)0xE0,(byte)0xF8,(byte)0x05,(byte)0x38,(byte)0xE4,(byte)0x13,(byte)0xD1,(byte)0xC6,(byte)0xF6,(byte)0x48,(byte)0x4D,(byte)0x69,(byte)0xC5,(byte)0x2A,(byte)0x87,(byte)0xF4,(byte)0xC7,(byte)0x35,(byte)0x07,(byte)0x0C,(byte)0x7C,(byte)0xF7,(byte)0x10,(byte)0xDB,(byte)0x18,(byte)0x8E,(byte)0x85,(byte)0x1E,(byte)0x90,(byte)0xA3,(byte)0x6F,(byte)0x0C,(byte)0x66,(byte)0x25,(byte)0xFC,(byte)0x79,(byte)0xFD,(byte)0x09,(byte)0x25,(byte)0xFF,(byte)0xA9,(byte)0xCE,(byte)0xCB,(byte)0xB4,(byte)0x19,(byte)0xBE,(byte)0xD7,(byte)0x9B,(byte)0x01,(byte)0x69,(byte)0x81,(byte)0x34,(byte)0x5D,(byte)0xC7,(byte)0xFA,(byte)0x33,(byte)0xA4,(byte)0x1D,(byte)0x1D,(byte)0x37,(byte)0x5D,(byte)0x17,(byte)0x7E,(byte)0x52,(byte)0x8F,(byte)0x2C,(byte)0x83,(byte)0x80,(byte)0xF7,(byte)0xB6,(byte)0x3E,(byte)0x96,(byte)0x2C,(byte)0xB4,(byte)0x15,(byte)0xF6,(byte)0x17,(byte)0x7D,(byte)0xD7,(byte)0xE8,(byte)0x33,(byte)0xA0,(byte)0x82,(byte)0x9F,(byte)0x6F,(byte)0xB1,(byte)0x81,(byte)0xE5,(byte)0xC1,(byte)0xD8,(byte)0xC5,(byte)0xCF,(byte)0x0E,(byte)0x63,(byte)0x5D,(byte)0xCA,(byte)0xAB,(byte)0x9F,(byte)0x61,(byte)0x21,(byte)0x1D,(byte)0xEC,(byte)0x71,(byte)0xA5,(byte)0xBF,(byte)0x25,(byte)0x5E,(byte)0xF9,(byte)0x53,(byte)0xA9};
		kyber.decapsulate(KyberParams.paramsIndcpaSecretKeyBytesK512, KyberParams.paramsIndcpaPublicKeyBytesK512, KyberParams.Kyber512SKBytes);
	}

	private void obtainSecretKey(APDU apdu)
	{
		byte[] buffer = apdu.getBuffer();
		short p = (short)255;
		byte[] secretKey = KyberAlgorithm.getInstance((byte)2).secretKey;
		if ((short)(receivedSecretKeyLength+255) > secretKey.length)
		{
			p = (short)(secretKey.length-receivedSecretKeyLength);
		}
		Util.arrayCopyNonAtomic(secretKey, receivedSecretKeyLength, buffer, (short)0x0000, p);
		apdu.setOutgoingAndSend((short)0x0000, p);

		receivedSecretKeyLength+=(short)255;
		if (receivedSecretKeyLength < secretKey.length)
		{
			ISOException.throwIt((short)0x5000);
		}
		receivedSecretKeyLength=0;
	}

	private void obtainEncapsulation(APDU apdu)
	{
		byte[] buffer = apdu.getBuffer();
		short p = (short)255;
		byte[] encapsulation = KyberAlgorithm.getInstance((byte)2).encapsulation;
		if ((short)(receivedEncapsulationLength+255) > encapsulation.length)
		{
			p = (short)(encapsulation.length-receivedEncapsulationLength);
		}
		Util.arrayCopyNonAtomic(encapsulation, receivedEncapsulationLength, buffer, (short)0x0000, p);
		apdu.setOutgoingAndSend((short)0x0000, p);

		receivedEncapsulationLength+=(short)255;
		if (receivedEncapsulationLength < encapsulation.length)
		{
			ISOException.throwIt((short)0x5000);
		}
		receivedEncapsulationLength=0;
	}

	private void setEncapsulation(APDU apdu)
	{
		byte[] buffer = apdu.getBuffer();
		short dataLength = apdu.setIncomingAndReceive();
		Util.arrayCopyNonAtomic(buffer, ISO7816.OFFSET_CDATA, KyberAlgorithm.getInstance((byte)2).encapsulation, setEncapsulationLength, dataLength);
		setEncapsulationLength += dataLength;
		if (setEncapsulationLength == (short)800)
		{
			setEncapsulationLength = 0;
		}
	}

	private void obtainPrivateKey(APDU apdu)
	{
		byte[] buffer = apdu.getBuffer();
		short p = (short)255;
		byte[] privateKey = KeyPair.getInstance((byte)2).privateKey;
		if ((short)(receivedPrivateKeyLength+255) > privateKey.length)
		{
			p = (short)(privateKey.length-receivedPrivateKeyLength);
		}
		Util.arrayCopyNonAtomic(privateKey, receivedPrivateKeyLength, buffer, (short)0x0000, p);
		apdu.setOutgoingAndSend((short)0x0000, p);

		receivedPrivateKeyLength+=(short)255;
		if (receivedPrivateKeyLength < privateKey.length)
		{
			ISOException.throwIt((short)0x5000);
		}
		receivedPrivateKeyLength=0;
	}

	private void obtainPublicKey(APDU apdu)
	{
		byte[] buffer = apdu.getBuffer();
		short p = (short)255;
		byte[] publicKey = KeyPair.getInstance((byte)2).publicKey;
		if ((short)(receivedPublicKeyLength+255) > publicKey.length)
		{
			p = (short)(publicKey.length-receivedPublicKeyLength);
		}
		Util.arrayCopyNonAtomic(publicKey, receivedPublicKeyLength, buffer, (short)0x0000, p);
		apdu.setOutgoingAndSend((short)0x0000, p);

		receivedPublicKeyLength+=(short)255;
		if (receivedPublicKeyLength < publicKey.length)
		{
			ISOException.throwIt((short)0x5000);
		}
		receivedPublicKeyLength=0;
	}
}